// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique
  name       String?
  progress   Progress[]  // Tracks progress of roadmaps
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Roadmap {
  id          String      @id @default(uuid())
  title       String
  description String
  topics      Topic[]     // List of topics associated with the roadmap
  progress    Progress[]  // Tracks progress of users on this roadmap
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Topic {
  id              String      @id @default(uuid())
  title           String
  description     String
  roadmap         Roadmap     @relation(fields: [roadmapId], references: [id])
  topicProgress   TopicProgress[]
  resources       Resource[]
  roadmapId       String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Resource {
  id          String     @id @default(uuid())
  videoUrl    String?
  driveLink   String?
  blogLink    String?
  topic       Topic     @relation(fields: [topicId], references: [id])
  topicId     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Progress {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  roadmap         Roadmap  @relation(fields: [roadmapId], references: [id])
  roadmapId       String
  percentage      Float    @default(0) // Progress percentage
  completedTopics TopicProgress[]      // Tracks completed topics
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model TopicProgress {
  id        String   @id @default(uuid())
  topic     Topic    @relation(fields: [topicId], references: [id])
  topicId   String
  progress  Progress @relation(fields: [progressId], references: [id])
  progressId String
  isDone    Boolean  @default(false) // Whether the topic is marked as done
  completedAt DateTime?
}